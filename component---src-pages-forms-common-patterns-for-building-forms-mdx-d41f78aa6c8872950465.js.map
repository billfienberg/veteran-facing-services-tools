{"version":3,"sources":["webpack:///./src/pages/forms/common-patterns-for-building-forms.mdx"],"names":["layoutProps","MDXContent","props","layout","DefaultLayout","render","this","components","name","Layout","Object","assign","id","parentName","React","Component","_frontmatter"],"mappings":"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","file":"component---src-pages-forms-common-patterns-for-building-forms-mdx-d41f78aa6c8872950465.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h1 id=\"common-patterns-for-building-forms\">Common patterns for building forms</h1>\n      <MDXTag name=\"p\" components={components}>{`Some forms require custom validation, styles, or conditional information based on user input. Use these patterns to address those needs.`}</MDXTag>\n      <h2 id=\"in-this-guide\">In this guide</h2>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#writing-custom-field-validation\"\n          }}>{`Writing custom field validation`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#validating-a-field-based-on-other-fields-in-the-same-object\"\n          }}>{`Validating a field based on other fields in the same object`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#changing-drop-down-options-based-on-data-in-another-field\"\n          }}>{`Changing drop-down options based on data in another field`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#creating-a-block-of-text-with-no-associated-fields\"\n          }}>{`Creating a block of text with no associated fields`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#conditionally-hiding-a-group-of-fields\"\n          }}>{`Conditionally hiding a group of fields`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#styling-expanded-or-collapsed-fields\"\n          }}>{`Styling expanded or collapsed fields`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#conditionally-including-a-page\"\n          }}>{`Conditionally including a page`}</MDXTag></MDXTag>\n      </MDXTag>\n      <h2 id=\"writing-custom-field-validation\">Writing custom field validation</h2>\n      <MDXTag name=\"p\" components={components}>{`To add field validations to your forms that JSON Schema doesn't provide, use the array `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:validations`}</MDXTag>{` in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` object. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:validations`}</MDXTag>{` can be a function or an object.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`If you pass a function, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:validations`}</MDXTag>{` is called with these arguments:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`errors`}</MDXTag>{`: The errors object for the field.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`fieldData`}</MDXTag>{`: The data for the field.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`formData`}</MDXTag>{`: The current form data.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`schema`}</MDXTag>{`: The current JSON Schema for the field.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`errorMessages`}</MDXTag>{`: The error messsage object for the field, if available.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Every validation function should update the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`errors`}</MDXTag>{` object with any errors found by calling the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`addErrors()`}</MDXTag>{` method. For example:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`function validateSSN(errors, ssn) {\n  if (!isValidSSN(ssn)) {\n    errors.addError('Please enter a valid 9 digit SSN (dashes allowed)');\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`When items in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:validations`}</MDXTag>{` array are objects, they have two properties:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`options`}</MDXTag>{`: The object that's passed to the validation function. This allows you to configure your validation function for different fields in the form.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`validator`}</MDXTag>{`: A function with the same signature as above, plus the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`options`}</MDXTag>{` object.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  validator: (errors, ssn, formData, schema, errorMessages, options) => {\n    if (!isValidWidget(ssn, options.someOption)) {\n      errors.addError('Please enter a valid 9 digit SSN (dashes allowed)');\n    }\n  },\n  options: {\n    someOption: true\n  }\n}\n`}</MDXTag></MDXTag>\n      <h2 id=\"validating-a-field-based-on-other-fields-in-the-same-object\">Validating a field based on other fields in the same object</h2>\n      <MDXTag name=\"p\" components={components}>{`You can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:validations`}</MDXTag>{` to validate objects in order to compare subfields. For example, given this schema:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  type: 'object',\n  properties: {\n    email: {\n      type: 'string'\n    },\n    confirmEmail: {\n      type: 'string'\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`If you use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:validations`}</MDXTag>{` on this object field instead of on the email or confirmEmail fields, you can compare the two fields:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`export function validateEmailsMatch(errors, pageData) {\n  const { email, confirmEmail } = pageData;\n  if (email !== confirmEmail) {\n    errors.confirmEmail.addError('Please ensure your entries match');\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The function must be referenced in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{`:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  'ui:validations': [ validateEmailsMatch ],\n  email: {\n    'ui:title': 'Email address'\n  },\n  confirmEmail: {\n    'ui:title': 'Re-enter email address'\n  }\n}\n`}</MDXTag></MDXTag>\n      <h2 id=\"changing-drop-down-options-based-on-data-in-another-field\">Changing drop-down options based on data in another field</h2>\n      <MDXTag name=\"p\" components={components}>{`Use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`updateSchema`}</MDXTag>{` option in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` to change a list of enums:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  'ui:options': {\n    updateSchema: (form, pageSchema) {\n      if (form.myField === 'otherOption') {\n        return {\n          enum: ['option1', 'option2'],\n          enumNames: ['Option 1', 'Option 2']\n        }\n      } else {\n        return {\n          enum: ['option1', 'option2'],\n          enumNames: ['Option 1', 'Option 2']\n        }\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Only the properties in the returned object are changed in the current schema. The object returned isn't used as an exact replacement for the schema, and if the current schema contains other properties, they aren't removed.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`For a long list of options, create all variations of the schema outside of the update function and use the update function to switch between them. You won't need to create a new schema object each time data changes in the form, requiring your field to re-render.`}</MDXTag>\n      <h2 id=\"creating-a-block-of-text-with-no-associated-fields\">Creating a block of text with no associated fields</h2>\n      <MDXTag name=\"p\" components={components}>{`Use 'ui:description' to show text or a custom component before the fields in a particular object in the schema.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`To create a block of text with no fields that follow, create an empty view object:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`// schema\n{\n  type: 'object',\n  properties: {\n    'view:textObject': {\n      type: 'object',\n      properties: {}\n    }\n  }\n}\n\n// uiSchema\n{\n  'view:textObject': {\n    'ui:description': 'My text'\n  }\n}\n`}</MDXTag></MDXTag>\n      <h2 id=\"conditionally-hiding-a-group-of-fields\">Conditionally hiding a group of fields</h2>\n      <MDXTag name=\"p\" components={components}>{`Sometimes fields in a form are siblings to others, but should be hidden conditionally. For example, this schema defines a field named `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`employed`}</MDXTag>{` that is rendered as a checkbox the user can check. If this field is false (the checkbox is not checked) there is no need to display the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`jobStartDate`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`monthlyWages`}</MDXTag>{` fields:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`schema: {\n  type: 'object',\n  properties: {\n    employed: { type: 'boolean' },\n    jobStartDate: { type: 'string' },\n    monthlyWages: { type: 'string' },\n    otherMonthlyIncome: { type: 'string' }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`To accomplish this, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` are written as:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`schema: {\n  type: 'object',\n  properties: {\n    employed: { type: 'boolean' },\n    'view:jobInformation': {\n      type: 'object',\n      properties: {\n        jobStartDate: { type: 'string' },\n        monthlyWages: { type: 'string' }\n      }\n    },\n    otherMonthlyIncome: { type: 'string' }\n  }\n},\nuiSchema: {\n  employed: { 'ui:title': 'I am employed' },\n  'view:jobInformation': {\n    'ui:options': {\n      hideIf: (formData) => !formData.employed\n    },\n    jobStartDate: { 'ui:title': 'Job start date' },\n    monthlyWages: { 'ui:title': 'Monthly wages' },\n  },\n  otherMonthlyIncome: { 'ui:title': 'Other monthly income' }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`hideIf`}</MDXTag>{` function is passed a copy of the current `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`formData`}</MDXTag>{` in order to determine the condition upon which the fields are shown. In this example, it will hide the fields unless `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`employed`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`true`}</MDXTag>{`.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Objects from the form config with names that start with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`view:`}</MDXTag>{` are not passed to the back-end, but fields within those `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`view:`}</MDXTag>{` objects are passed to the back-end by including them in the parent object. In this example, the fields `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`jobStartDate`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`monthlyWages`}</MDXTag>{` would be included in the same object as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`employed`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`otherMonthlyIncome`}</MDXTag>{`, while the field for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`view:JobInformation`}</MDXTag>{` would be filtered out.`}</MDXTag>\n      <h2 id=\"styling-expanded-or-collapsed-fields\">Styling expanded or collapsed fields</h2>\n      <MDXTag name=\"p\" components={components}>{`To indent or otherwise style fields that are expanded or collapsed with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`expandUnder`}</MDXTag>{` option, set a class on the controlling field. For example:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`// uiSchema\n{\n  field1: {\n    'ui:title': 'This field expands/collapses other items',\n    'ui:options': {\n      expandUnderClassNames: 'schemaform-expandUnder-indent'\n    }\n  },\n  field2: {\n    'ui:title': 'This field is controlled by field1'\n    'ui:options': {\n      expandUnder: 'field1'\n    }\n  },\n  field3: {\n    'ui:title': 'This field is controlled by field1'\n    'ui:options': {\n      expandUnder: 'field1'\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In this example, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schemaform-expandUnder-indent`}</MDXTag>{` is applied to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`div`}</MDXTag>{` that surrounds `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`field2`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`field3`}</MDXTag>{`, which indents the fields. For additional styling, create a new class and add your own styles.`}</MDXTag>\n      <h2 id=\"conditionally-including-a-page\">Conditionally including a page</h2>\n      <MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`depends`}</MDXTag>{` property determines whether a page is active or not. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`depends`}</MDXTag>{` can work in a few ways:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`// With an object\ndepends: {\n  passPhrase: 'open sesame'\n}\n\n// With an array\n// This will activate the page if any of the items in the array are true. Think || not &&.\ndepends: [\n  { passPhrase: 'open sesame' },\n  { passPhrase: 'open up!' }\n]\n\n// With a function\ndepends: (formData) => {\n  // return bool, true if page is active, false if page should be skipped\n  return formData.passPhrase === 'open sesame' && formData.codeWord === 'chicken';\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`For example, given this chapter configuration:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`chapterName: {\n  title: 'Chapter Title',\n  pages: {\n    pageName: {\n      ...\n      schema: {\n        type: 'object',\n        properties: {\n          passPhrase: { type: 'string' }\n        }\n      }\n    }\n    otherPageName: {\n      title: 'Page title',\n      path: 'path/to/page',\n      initialData: {},\n      depends: {\n        passPhrase: 'open sesame'\n      },\n      uiSchema: {},\n      schema: {}\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`If a user types 'open sesame' for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`passPhrase`}</MDXTag>{` on the first page, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`otherPageName`}</MDXTag>{` is active. For any other value, including no value, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`otherPageName`}</MDXTag>{` is inactive and the page is skipped.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Don't use the pass phrase as a secure login or other authentication mechanism.`}</MDXTag>{` Within the source, the text of a pass phrase is clear text, even when it's in a function.`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}