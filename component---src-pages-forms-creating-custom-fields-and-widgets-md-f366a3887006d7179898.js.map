{"version":3,"sources":["webpack:///./src/pages/forms/creating-custom-fields-and-widgets.md"],"names":["layoutProps","MDXContent","props","layout","DefaultLayout","render","this","components","name","Layout","Object","assign","id","parentName","React","Component","_frontmatter"],"mappings":"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","file":"component---src-pages-forms-creating-custom-fields-and-widgets-md-f366a3887006d7179898.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h1 id=\"creating-custom-fields-and-widgets\">Creating custom fields and widgets</h1>\n      <MDXTag name=\"p\" components={components}>{`You can customize the base library to satisfy the unique requirements of your particular form.`}</MDXTag>\n      <h2 id=\"in-this-guide\">In this guide</h2>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#how-vafs-uses-rjsf\"\n          }}>{`How the VAFS uses RJSF`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#customizing-fields-and-widgets-from-rjsf\"\n          }}>{`Customizing fields, widgets, and events from RJSF`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#supporting-multi-page-forms\"\n          }}>{`Supporting multi-page forms`}</MDXTag></MDXTag>\n      </MDXTag>\n      <h2 id=\"how-vafs-uses-rjsf\">How VAFS uses RJSF</h2>\n      <MDXTag name=\"p\" components={components}>{`The VAFS code uses react-jsonschema-form, or RJSF, to render form fields, but it builds a scaffolding on top of it to support multi-page forms and common form patterns. Additionally, VAFS uses RJSF to create a form configuration spec that allows developers to specify the structure of a multi-page form.`}</MDXTag>\n      <h3 id=\"customizing-fields-widgets-and-events-from-rjsf\">Customizing fields, widgets, and events from RJSF</h3>\n      <MDXTag name=\"p\" components={components}>{`RJSF passes all field and widget components to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SchemaField`}</MDXTag>{` (and most other components) as a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`registry`}</MDXTag>{` property. To override fields and widgets in the registry, pass components of the same name into the library's main `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Form`}</MDXTag>{` component. The VAFS uses custom versions of these components:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ObjectField`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ArrayField`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`FieldTemplate`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"/forms/available-widgets.md#textwidget\"\n          }}>{`TextWidget`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"/forms/available-widgets.md#selectwidget\"\n          }}>{`SelectWidget`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"/forms/available-widgets.md#emailwidget\"\n          }}>{`EmailWidget`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"/forms/available-widgets.md#checkboxwidget\"\n          }}>{`CheckboxWidget`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"/forms/available-widgets.md#radiowidget\"\n          }}>{`RadioWidget`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`TextareaWidget`}</MDXTag></MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The VAFS uses these custom fields and widgets:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"/forms/available-widgets.md#yesnowidget\"\n          }}>{`YesNoWidget`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"/forms/available-widgets.md#datewidget\"\n          }}>{`DateWidget`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"/forms/available-widgets.md#ssnwidget\"\n          }}>{`SSNWidget`}</MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"/forms/available-widgets.md#phonenumberwidget\"\n          }}>{`PhoneNumberWidget`}</MDXTag></MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Writing custom widgets is similar to writing React components: A value is passed in, and an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onChange`}</MDXTag>{` hook is provided for changing data. Other properties like the schemas and field ID are also provided.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Custom fields receive all properties listed previously for field components in RJSF.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In addition to customizing fields and widgets, the VAFS code hooks into a number of events provided by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Form`}</MDXTag>{` to support our form patterns, found in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FormPage`}</MDXTag>{` component. These events are:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`validate`}</MDXTag>{`: This event is called when validation occurs. We call our custom validation, which reads uiSchema for custom validation hooks that have been included for form fields outside of what JSON Schema provides.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`transformErrors`}</MDXTag>{`: This event is provided when the VAFS receives the list of JSON Schema validation errors and can return a transformed list. It replaces the messages with a set of default messages, as well as any messages provided for specific fields in uiSchema. It also moves the errors for required fields from the object level to the field level. Because JSON Schema specifies required fields with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`required`}</MDXTag>{` array on an object field schema, any errors about missing data are associated with that object and moved so they're associated with the missing field and rendered with that field on the form.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`onError`}</MDXTag>{`: This event is called if a user tries to submit a form with a validation error. The VAFS sets a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`submitted`}</MDXTag>{` flag in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`formContext`}</MDXTag>{`, which is an object passed to all fields and components in the RJSF form. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`FieldTemplate`}</MDXTag>{` component uses `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`formContext`}</MDXTag>{` to display all error messages to the user.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`onSubmit`}</MDXTag>{`: This event is called when a user submits a form with no validation errors. When this happens, the VAFS code looks for the next page in the multi-page form and navigates to it.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`onChange`}</MDXTag>{`: This event is called when a user changes data in the form. The VAFS fires a Redux action and updates the store with the new data. The reducer code does several recalculations:`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"strong\" components={components} parentName=\"li\">{`Recalculate the required fields for the schema:`}</MDXTag>{` You can specify functions in uiSchema that set fields as optional or required based on form data. This runs them and updates the schema.`}</MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"strong\" components={components} parentName=\"li\">{`Recalculate which schema fields are hidden and remove that data:`}</MDXTag>{` In uiSchema, you can specify fields that are conditionally hidden based on user data. To avoid validation errors from data a user can't see, the VAFS updates the schema to add a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ui:hidden`}</MDXTag>{` property and remove any user data for those fields.`}</MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"strong\" components={components} parentName=\"li\">{`Recalcuate general schema updates:`}</MDXTag>{` Because you can make arbitrary changes to the schema based on form data, the VAFS must also make those changes, for example, removing options in an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`enum`}</MDXTag>{` array when a user has entered certain data.`}</MDXTag>\n          </MDXTag></MDXTag>\n      </MDXTag>\n      <h3 id=\"supporting-multi-page-forms\">Supporting multi-page forms</h3>\n      <MDXTag name=\"p\" components={components}>{`Large forms are organized into `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`chapters`}</MDXTag>{` and `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`pages`}</MDXTag>{`. A chapter is a collection of pages, each rendered as a single RJSF form with a schema and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` field component. The chapter and page organization is described in a form config file that the VAFS uses to generate a list of routes. A user can move through the list of pages until they reach the review page.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The review page also takes the config file and renders each chapter in an accordion panel. Inside a panel, the VAFS uses RJSF to render each page in a read-only view. This view uses simplified widgets and a different `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`FieldTemplate`}</MDXTag>{` component to render each form field in a definition list. The read-only view uses the RJSF `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Form`}</MDXTag>{` component with no input elements, rendering instead with text. When a user on the review page clicks Edit for a form page, the normal widgets are used and a normal form is rendered.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Each array item on a review page is rendered as read-only, and individual items can be edited independently. To accomplish this, the review `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ArrayField`}</MDXTag>{` component renders each item in the array as its own RJSF `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Form`}</MDXTag>{`. In addition, array fields are taken from the page's read-only view and rendered separately.`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}