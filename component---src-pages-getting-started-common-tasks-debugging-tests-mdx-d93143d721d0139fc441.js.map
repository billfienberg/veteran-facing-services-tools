{"version":3,"sources":["webpack:///./src/pages/getting-started/common-tasks/debugging-tests.mdx"],"names":["layoutProps","MDXContent","props","layout","DefaultLayout","render","this","components","name","Layout","Object","assign","id","parentName","React","Component","_frontmatter"],"mappings":"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","file":"component---src-pages-getting-started-common-tasks-debugging-tests-mdx-d93143d721d0139fc441.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h1 id=\"debugging-tests\">Debugging tests</h1>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\"><MDXTag name=\"em\" components={components} parentName=\"strong\">{` Unit Tests `}</MDXTag></MDXTag></MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">\n          <MDXTag name=\"p\" components={components} parentName=\"li\">{`You can put a console.log in your test code. When you run the test, the output will be in the command line.`}</MDXTag>\n        </MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">\n          <MDXTag name=\"p\" components={components} parentName=\"li\">{`Use Chrome devtools to debug unit tests`}</MDXTag>\n          <MDXTag name=\"ol\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`Go to `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n                  \"href\": \"chrome://inspect/\"\n                }}>{`chrome://inspect/`}</MDXTag>{`.`}</MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`Add a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`debugger`}</MDXTag>{` statement in your test code and if you want to run only your test add the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`.only`}</MDXTag>{` on your test like so. Make sure to remove the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`.only`}</MDXTag>{` once you are done.`}</MDXTag>\n              <MDXTag name=\"pre\" components={components} parentName=\"li\"><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  it.only('testing something', () => {\n    debugger\n\n    expect(value).to.eq(true);\n  })\n`}</MDXTag></MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`run in the terminal`}</MDXTag>\n              <MDXTag name=\"pre\" components={components} parentName=\"li\"><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  \\$ BABEL_ENV=test node_modules/.bin/mocha --inspect-brk --opts src/platform/testing/unit/mocha.opts --recursive '{test,src}/**/*.unit.spec.js?(x)' src/platform/testing/unit/helper.js\n`}</MDXTag></MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`Go to your Node Chrome Developer Tools. Under `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Remote Target`}</MDXTag>{` you should see your test running. Click on the link where your test is running to open the debugger tool.`}</MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`You will want to press the debugger play button to start the program. It will initially pause on the first line of code.`}</MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`It might take awhile for the tests to setup, just be patient and eventually it will run.`}</MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`Once the test runs, your code should break at your debugger statement.`}</MDXTag>\n            </MDXTag>\n          </MDXTag>\n        </MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">\n          <MDXTag name=\"p\" components={components} parentName=\"li\">{`VSCode's debugging tool for unit tests`}</MDXTag>\n          <MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Add this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Mocha Tests`}</MDXTag>{` configuration to your `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`.vscode/launch.json`}</MDXTag>{` file`}<MDXTag name=\"pre\" components={components} parentName=\"li\"><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  {\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Mocha Tests\",\n            \"env\": {\"BABEL_ENV\": \"test\"},\n            \"runtimeExecutable\": \"\\${workspaceFolder}/node_modules/.bin/mocha\",\n            \"runtimeArgs\": [\n                \"--inspect\",\n                \"--opts\",\n                \"\\${workspaceFolder}/src/platform/testing/unit/mocha.opts\",\n                \"--recursive\",\n                \"\\${workspaceFolder}/{test,src}/**/*.unit.spec.js?(x)\",\n                \"\\${workspaceFolder}/src/platform/testing/unit/helper.js\"\n            ],\n            \"port\": 9229\n        }\n    ]\n  }\n`}</MDXTag></MDXTag></MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Now you can add breakpoints or debugger statements to debug your code through the VSCode debugger tools.`}</MDXTag>\n          </MDXTag>\n        </MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`*** End to End tests`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">\n          <MDXTag name=\"p\" components={components} parentName=\"li\">{`It's possible to set an infinite pause (`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.pause()`}</MDXTag>{`) in the test code and then see what's happening at a given point in the browser where the test is running.`}</MDXTag>\n          <MDXTag name=\"pre\" components={components} parentName=\"li\"><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`  client\n    .openUrl('http://localhost:3000')\n    .waitForElementVisible('body', Timeouts.normal)\n    .pause()\n    .click('.submit_button')\n`}</MDXTag></MDXTag>\n        </MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">\n          <MDXTag name=\"p\" components={components} parentName=\"li\">{`Using Node Chrome DevTools. You can add a (`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.perform`}</MDXTag>{`) method and either console.log or add a debugger statement to debug your code in the callback function.`}</MDXTag>\n          <MDXTag name=\"ol\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`add a perform method in your code.`}</MDXTag>\n              <MDXTag name=\"pre\" components={components} parentName=\"li\"><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`client\n  .openUrl('http://localhost:3000')\n  .waitForElementVisible('body', Timeouts.normal)\n  .perform(() => {\n    console.log(testData);\n\n    debugger\n  })\n  .click('.submit_button')\n`}</MDXTag></MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`open up `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n                  \"href\": \"chrome://inspect\"\n                }}>{`chrome://inspect`}</MDXTag>{` in your browser.`}</MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`In your terminal run. You can pass in a specific file path to test after the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nightwatch.js`}</MDXTag>{` or leave it blank to run all tests.`}</MDXTag>\n              <MDXTag name=\"pre\" components={components} parentName=\"li\"><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`\\$ BABEL_ENV=test WEB_PORT=3001 node --inspect-brk node_modules/nightwatch/bin/runner.js -c config/nightwatch.js [optional file to test]\n`}</MDXTag></MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`Go to your Node Chrome Developer Tools. Under `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Remote Target`}</MDXTag>{` you should see your test running. Click on the link where your test is running to open the debugger tool.`}</MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`You will want to press the debugger play button to start the program. It will initially pause on the first line of code.`}</MDXTag>\n            </MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ol\">\n              <MDXTag name=\"p\" components={components} parentName=\"li\">{`after the program starts it should pause at your debugger statement or you should see your console.logs in the console.`}</MDXTag>\n            </MDXTag>\n          </MDXTag>\n        </MDXTag>\n      </MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}