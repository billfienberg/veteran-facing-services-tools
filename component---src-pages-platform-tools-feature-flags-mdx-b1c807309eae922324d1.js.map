{"version":3,"sources":["webpack:///./src/pages/platform/tools/feature-flags.mdx"],"names":["layoutProps","MDXContent","props","layout","DefaultLayout","render","this","components","name","Layout","Object","assign","id","parentName","React","Component","_frontmatter"],"mappings":"iPAKA,IAAMA,EAAc,GACCC,E,oBACnB,WAAYC,GAAO,aACjB,cAAMA,IAAN,MACKC,OAASC,IAFG,E,0GAKnBC,OAAA,WAAS,MAIHC,KAAKJ,MAFPK,EAFK,EAELA,WACGL,E,oIAHE,mBAKP,OAAO,kBAAC,SAAD,CAAQM,KAAK,UAAUC,OAAQH,KAAKH,OAAQH,YAAaU,OAAOC,OAAO,GAAIX,EAAaE,GAAQK,WAAYA,GAEjH,wBAAIK,GAAG,2BAAP,2BACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,mQACA,wBAAIK,GAAG,yCAAP,yCACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,SAASD,WAAYA,EAAYM,WAAW,KAAzD,WAAzC,4DAAuL,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CAClP,KAAQ,2BAD2K,kBAAvL,UAE2C,kBAAC,SAAD,CAAQM,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CACtG,KAAQ,6JAD+B,oBAG3C,kBAAC,SAAD,CAAQM,KAAK,IAAID,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,SAASD,WAAYA,EAAYM,WAAW,KAAzD,cAAzC,yEAAuM,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CAClQ,KAAQ,gKAD2L,gBAAvM,uCAGA,kBAAC,SAAD,CAAQM,KAAK,KAAKD,WAAYA,GAC5B,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,wFAAmJ,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MACpM,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,6DACA,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,0GAGN,wBAAID,GAAG,oBAAP,oBACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,SAASD,WAAYA,EAAYM,WAAW,KAAzD,WAAzC,gEAA2L,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CACtP,KAAQ,2BAD+K,kBAA3L,UAE2C,kBAAC,SAAD,CAAQM,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CACtG,KAAQ,6JAD+B,oBAG3C,kBAAC,SAAD,CAAQM,KAAK,IAAID,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,SAASD,WAAYA,EAAYM,WAAW,KAAzD,cAAzC,KACA,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,GAC5B,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,2EAAsI,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,EAAYM,WAAW,KAAKX,MAAO,CAClM,KAAQ,gKAD0H,gBAAtI,sCAEqE,kBAAC,SAAD,CAAQM,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MACtH,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,wFAAmJ,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MACpM,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,6DACA,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,2GAGR,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,4FAAuJ,kBAAC,SAAD,CAAQL,KAAK,aAAaD,WAAYA,EAAYM,WAAW,MAA7D,kBAAvJ,OAA4P,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,EAAYM,WAAW,KAAKX,MAAO,CACxT,KAAQ,0KADgP,oBAA5P,+FAIF,wBAAIU,GAAG,2BAAP,2BACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,+DAAyG,kBAAC,SAAD,CAAQC,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CACpK,KAAQ,2BAD6F,kBAAzG,yHAE0J,kBAAC,SAAD,CAAQM,KAAK,aAAaD,WAAYA,EAAYM,WAAW,KAA7D,oBAF1J,wFAGA,kBAAC,SAAD,CAAQL,KAAK,MAAMD,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,OAAOD,WAAYA,EAAYM,WAAW,MAAMX,MAAO,CAC3G,UAAa,sBAD0B,yKAS3C,kBAAC,SAAD,CAAQM,KAAK,IAAID,WAAYA,GAA7B,wEACA,kBAAC,SAAD,CAAQC,KAAK,MAAMD,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,OAAOD,WAAYA,EAAYM,WAAW,MAAMX,MAAO,CAC3G,UAAa,sBAD0B,+EAO3C,wBAAIU,GAAG,8BAAP,8BACA,kBAAC,SAAD,CAAQJ,KAAK,KAAKD,WAAYA,GAC5B,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,mIACA,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,iEAA4H,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,EAAYM,WAAW,KAAKX,MAAO,CACxL,KAAQ,sGADgH,kBAA5H,gHAEiJ,kBAAC,SAAD,CAAQM,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAClM,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,mHAEJ,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,+GAEF,wBAAID,GAAG,qCAAP,qCACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,2oBACA,kBAAC,SAAD,CAAQC,KAAK,IAAID,WAAYA,GAA7B,yEACA,wBAAIK,GAAG,4CAAP,4CACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,8FACA,kBAAC,SAAD,CAAQC,KAAK,MAAMD,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,OAAOD,WAAYA,EAAYM,WAAW,MAAMX,MAAO,CAC3G,UAAa,gBAD0B,gYAmB3C,kBAAC,SAAD,CAAQM,KAAK,IAAID,WAAYA,GAA7B,yPACA,wBAAIK,GAAG,4BAAP,4BACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,0FAAoI,kBAAC,SAAD,CAAQC,KAAK,aAAaD,WAAYA,EAAYM,WAAW,KAA7D,qBAApI,iFACA,kBAAC,SAAD,CAAQL,KAAK,MAAMD,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,OAAOD,WAAYA,EAAYM,WAAW,MAAMX,MAAO,CAC3G,UAAa,gBAD0B,sGAO3C,kBAAC,SAAD,CAAQM,KAAK,IAAID,WAAYA,GAA7B,0MACA,kBAAC,SAAD,CAAQC,KAAK,IAAID,WAAYA,GAA7B,oCAA8E,kBAAC,SAAD,CAAQC,KAAK,aAAaD,WAAYA,EAAYM,WAAW,KAA7D,6BAA9E,sCAA4N,kBAAC,SAAD,CAAQL,KAAK,aAAaD,WAAYA,EAAYM,WAAW,KAA7D,YAA5N,8BAAiV,kBAAC,SAAD,CAAQL,KAAK,aAAaD,WAAYA,EAAYM,WAAW,KAA7D,sCAAjV,QAA0c,kBAAC,SAAD,CAAQL,KAAK,aAAaD,WAAYA,EAAYM,WAAW,KAA7D,YAA1c,uGAAwoB,kBAAC,SAAD,CAAQL,KAAK,aAAaD,WAAYA,EAAYM,WAAW,KAA7D,YAAxoB,YACA,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,GAA7B,6JACA,kBAAC,SAAD,CAAQC,KAAK,MAAMD,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,OAAOD,WAAYA,EAAYM,WAAW,MAAMX,MAAO,CAC3G,UAAa,gBAD0B,wMAU3C,kBAAC,SAAD,CAAQM,KAAK,IAAID,WAAYA,GAA7B,kCAA4E,kBAAC,SAAD,CAAQC,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CACvI,KAAQ,gCADgE,8BAA5E,0LAEuO,kBAAC,SAAD,CAAQM,KAAK,KAAKD,WAAYA,EAAYM,WAAW,KAArD,OAFvO,gEAGA,wBAAID,GAAG,2CAAP,2CACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,uEACA,kBAAC,SAAD,CAAQC,KAAK,MAAMD,WAAYA,GAAY,kBAAC,SAAD,CAAQC,KAAK,OAAOD,WAAYA,EAAYM,WAAW,MAAMX,MAAO,CAC3G,UAAa,oBAD0B,mG,GArITY,IAAMC,WA+IjCC,EAAe","file":"component---src-pages-platform-tools-feature-flags-mdx-b1c807309eae922324d1.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h1 id=\"front-end-feature-flags\">Front end feature flags</h1>\n      <MDXTag name=\"p\" components={components}>{`Agile and user centric workflows often use testing of partially complete features to refine or research experiences. This document provides recommendations on using feature flags to manage new unreleased features in our continuous integration environment.`}</MDXTag>\n      <h2 id=\"enhancements-to-existing-applications\">Enhancements to Existing Applications</h2>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`STAGING`}</MDXTag>{`: Unreleased features should always be made available on `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://staging.va.gov\"\n        }}>{`staging.va.gov`}</MDXTag>{` using `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/department-of-veterans-affairs/vets-website/blob/10380007a3ec77047be10e4fb2a42d343c22c5d3/src/platform/utilities/environment/index.js\"\n        }}>{`!isProduction()`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`PRODUCTION`}</MDXTag>{`: Unreleased features can be made available on www.va.gov by checking `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/department-of-veterans-affairs/vets-website/blob/92811be079cac99884abc28c2c96da61f08fe2a5/src/platform/utilities/storage/localStorage.js\"\n        }}>{`localstorage`}</MDXTag>{` for a developer-defined name/value`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Turning on the enhancement can be done by adding this name/value to the local storage`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\">{`With a console command ran by the user in the browser, or`}</MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\">{`With application specific code that automatically checks when a certain query parameter is present.`}</MDXTag>\n          </MDXTag></MDXTag>\n      </MDXTag>\n      <h2 id=\"new-applications\">New Applications</h2>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`STAGING`}</MDXTag>{`: Unreleased applications should always be made available on `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://staging.va.gov\"\n        }}>{`staging.va.gov`}</MDXTag>{` using `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/department-of-veterans-affairs/vets-website/blob/10380007a3ec77047be10e4fb2a42d343c22c5d3/src/platform/utilities/environment/index.js\"\n        }}>{`!isProduction()`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`PRODUCTION`}</MDXTag>{`:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Unreleased applications can be made available on www.va.gov by checking `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"https://github.com/department-of-veterans-affairs/vets-website/blob/92811be079cac99884abc28c2c96da61f08fe2a5/src/platform/utilities/storage/localStorage.js\"\n          }}>{`localstorage`}</MDXTag>{` for a developer-defined name/value`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Turning on the application can be done by adding this name/value to the local storage`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n                <MDXTag name=\"li\" components={components} parentName=\"ul\">{`With a console command ran by the user in the browser, or`}</MDXTag>\n                <MDXTag name=\"li\" components={components} parentName=\"ul\">{`With application specific code that automatically checks when a certain query parameter is present.`}</MDXTag>\n              </MDXTag></MDXTag>\n          </MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Unreleased applications can be made available on production behind a password by setting `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`protected: yes`}</MDXTag>{` in `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"https://github.com/department-of-veterans-affairs/devops/blob/e1030d1a499e39eaeceb8f4bdcbd33baf7ee946d/ansible/deployment/config/revproxy-vagov/vars/react_routes.yml\"\n          }}>{`react_routes.yml`}</MDXTag>{`. External teams should work with their DSVA contact to request support for enabling this.`}</MDXTag>\n      </MDXTag>\n      <h2 id=\"new-vagov-content-pages\">New vagov-content pages</h2>\n      <MDXTag name=\"p\" components={components}>{`Unreleased content pages should always be made available on `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://staging.va.gov\"\n        }}>{`staging.va.gov`}</MDXTag>{` by adding an exclusion flag to the front matter of the content page. For example, because this front matter includes `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`vagovprod: false`}</MDXTag>{`, this content page would be excluded from the build for the production environment:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-markdown\"\n        }}>{`---\ntitle: Apply for disability benefits\nvagovprod: false\n---\n<nav aria-label=\"Breadcrumb\" aria-live=\"polite\" class=\"va-nav-breadcrumbs\"\nid=\"va-breadcrumbs\">\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Content pages can be excluded from any or all of these environments:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-markdown\"\n        }}>{`vagovprod: false\nvagovstaging: false\nvagovdev: false\nlocalhost: false\n`}</MDXTag></MDXTag>\n      <h2 id=\"writing-good-feature-flags\">Writing good feature flags</h2>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`New features or applications should be merged often so they can be included as part of the daily continuous integration deploy.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Feature flagged enhancements should be made with code that is `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to\"\n          }}>{`easy to delete`}</MDXTag>{`- ideally done simply and with as few checks as possible. Repeating yourself is okay in feature flagged code.`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Making code that's easy to delete ensures that deprecated code is quickly removed once a feature is released.`}</MDXTag>\n          </MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Making features or applications available in production should done only as needed for testing with users.`}</MDXTag>\n      </MDXTag>\n      <h2 id=\"feature-flags-for-metalsmith-code\">Feature flags for Metalsmith code</h2>\n      <MDXTag name=\"p\" components={components}>{`Va.gov creates some pages based on content from the VA's Drupal CMS. The CMS has its own content model, which can sometimes change. When those changes modify the existing structure of the content model, the queries and templates in vets-website that expect a different model may break. And because the CMS and vets-website are separate systems with different deployment processes, we can't push up changes in both systems simultaneously. In order to keep the two systems in sync, we need to be able to turn features on and off in vets-website depending on what environment we're in, and update that feature state whenever a cms deployment happens.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`We've created some infrastructure to make this a little easier to do.`}</MDXTag>\n      <h3 id=\"creating-a-flag-and-turning-it-on-or-off\">Creating a flag and turning it on or off</h3>\n      <MDXTag name=\"p\" components={components}>{`In src/site/utilities/featureFlags.js, you'll see a list of current flags and their state:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`// Edit this to add new flags\nconst featureFlags = {\n  FEATURE1: 'feature1',\n};\n\n// Edit this to turn flags on or off\nconst flagsByBuildtype = {\n  // localhost: [],\n  localhost: [featureFlags.FEATURE1],\n  // vagovdev: [flags.FEATURE1],\n  vagovdev: [],\n  // vagovstaging: [flags.FEATURE1],\n  vagovstaging: [],\n  // vagovprod: [flags.FEATURE1],\n  vagovprod: [],\n};\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In these two objects, you can create a new feature flag and set which web environments it is turned on in. Whenever you need to change what environment has a particular feature, you would add the flag to the array associate with that build type.`}</MDXTag>\n      <h3 id=\"using-flags-in-node-code\">Using flags in Node code</h3>\n      <MDXTag name=\"p\" components={components}>{`There are a couple ways to use the flag in Node Javascript code. One way is to use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`applyFeatureFlags`}</MDXTag>{` helper in a file that you would like to create a feature flagged variant of:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`const someQuery = 'some query info';\n\nmodule.exports = someQuery;\napplyFeatureFlags(module);\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`This helper looks through all of the enabled feature flags and checks to see if there are files with the same name as the current file, but with a feature flag in the file path before the extension.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`So, for example, if your file is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`healthCarePage.graphql.js`}</MDXTag>{` and there's a feature flag called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`feature1`}</MDXTag>{`, the helper will look for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`healthCarePage.graphql.feature1.js`}</MDXTag>{`. If `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`feature1`}</MDXTag>{` is turned on, then it will replace the exported module data with the export from the file with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`feature1`}</MDXTag>{` suffix.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`If you want to make a smaller conditional logic change than creating a whole new file, you can import the featureFlags file and check the flags directly:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`const { featureFlags, enabledFeatureFlags } = require('./src/site/utilities/featureFlags');\n\n...\n\nif (enabledFeatureFlags[featureFlags.FEATURE1]) {\n  // do something when the flag is on\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Keep in mind the advice in the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"#writing-good-feature-flags\"\n        }}>{`Writing good feature flags`}</MDXTag>{` section. You should write the logic in a way that is easy to remove later. It's often easier to change some logic and then add a conditional that modifies something with the flag is `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`not`}</MDXTag>{` enabled. That lets you simply remove the conditional later.`}</MDXTag>\n      <h3 id=\"using-feature-flags-in-liquid-templates\">Using feature flags in Liquid templates</h3>\n      <MDXTag name=\"p\" components={components}>{`All liquid templates have access to the current feature flag state:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-liquid\"\n        }}>{`{% if enabledFeatureFlags.feature1 == true %}\n  <div>Fancy new feature</div>\n{% endif %}\n`}</MDXTag></MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}