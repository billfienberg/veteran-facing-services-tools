(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{j4L8:function(e,n,a){"use strict";a.r(n),a.d(n,"default",(function(){return c})),a.d(n,"_frontmatter",(function(){return i}));a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("91GP");var t=a("q1tI"),o=a.n(t),m=a("6qfE"),r=a("3dLD");var l={},c=function(e){var n,a;function t(n){var a;return(a=e.call(this,n)||this).layout=r.a,a}return a=e,(n=t).prototype=Object.create(a.prototype),n.prototype.constructor=n,n.__proto__=a,t.prototype.render=function(){var e=this.props,n=e.components,a=function(e,n){if(null==e)return{};var a,t,o={},m=Object.keys(e);for(t=0;t<m.length;t++)a=m[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,["components"]);return o.a.createElement(m.MDXTag,{name:"wrapper",Layout:this.layout,layoutProps:Object.assign({},l,a),components:n},o.a.createElement("h1",{id:"write-a-unit-test"},"Write a unit test"),o.a.createElement("h2",{id:"unit-testing-overview"},"Unit testing overview"),o.a.createElement(m.MDXTag,{name:"ul",components:n},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"vets-website")," uses",o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://mochajs.org/"}},"Mocha")," for running unit tests"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"http://chaijs.com/"}},"Chai")," for test assertions"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://airbnb.io/enzyme/"}},"Enzyme")," for mounting and inspecting React components"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://sinonjs.org/"}},"Sinon")," for stubs and spies"))),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"Unit tests are ",o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"li"},"collocated with application folder")," in a test directory that matches the application directory structure")),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"- ðŸ“‚ src\n  - ðŸ“‚ my-application\n    - ðŸ“‚ components\n      - MyComponent.jsx\n    - ðŸ“‚ tests\n      - ðŸ“‚ components\n        - MyComponent.unit.spec.jsx\n")),o.a.createElement(m.MDXTag,{name:"ul",components:n},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"Mocha runs all unit tests under ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"/src")," folder that end with ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},".unit.spec.js(x)"))),o.a.createElement("h2",{id:"unit-test-conventions"},"Unit test conventions"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"import { expect } from 'chai';\nimport { shallow } from 'enzyme';\nimport MyComponent from '../../components/MyComponent';\n\ndescribe('my-application', () => {\n  describe('MyComponent', () => {\n    it('renders privacy act disclosure when state.show is true', () => {\n        const componentUnderTest = shallow(<MyComponent />);\n        ...\n        expect(someCondition).to.be.true;\n\n        componentUnderTest.unmount();\n    })\n  });\n});\n")),o.a.createElement(m.MDXTag,{name:"ul",components:n},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"use ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"describe")," to organize tests by application and feature",o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"two levels is adequate depending on the size of the application being tested"))),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"use ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"it")," to describe the unit test",o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"use active voice"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"describe the behavior in terms specific to the unit"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"don't abstract the test description with business logic"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"li"},"Recommended"),":",o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"it('truncates the address property when it is longer than 15 characters')")),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"it('renders an error when props.errors contains at least one item')")))),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"li"},"Not recommended"),":",o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"it('shortens the address when the user has a long address')")),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"it('shows an error when the user is not logged in')")))),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"use Enzyme's ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://airbnb.io/enzyme/docs/api/shallow.html"}},"shallow")," instead of ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://airbnb.io/enzyme/docs/api/mount.html"}},"mount")," when possible to test components"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"always ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"unmount")," components at the end of the test")))),o.a.createElement("h2",{id:"writing-unit-tests-for-vafs-pages"},"Writing unit tests for VAFS pages"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"import { DefinitionTester } from 'platform/testing/unit/schemaform-utils';\n\ndescribe('MyForm FormID', () => {\n\nconst {\n    schema,\n    uiSchema,\n    arrayPath,\n  } = formConfig.chapters.myFormChapter.pages.myFormPage;\n\n  it('renders myFormPage form', () => {\n    const form = mount(\n      <DefinitionTester\n        arrayPath={arrayPath}\n        pagePerItemIndex={0}\n        definitions={formConfig.defaultDefinitions}\n        schema={schema}\n        data={initialData}\n        formData={initialData}\n        uiSchema={uiSchema}\n      />,\n    );\n\n    expect(form.find('select').length).to.equal(6); // from/to months, days; country, state\n    expect(form.find('input').length).to.equal(4); // facility name, from/to years, city\n    form.unmount();\n  });\n")),o.a.createElement(m.MDXTag,{name:"ul",components:n},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"organize forms config tests by page"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"use the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"<DefinitionTester />")," to render form configs for testing"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"test at least",o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"number of each type of input is rendered (example above)"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"any conditional display logic on the page"),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"all field level validation errors"))),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"use the other ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"schemaform-utils")," for filling out form data:")),o.a.createElement(m.MDXTag,{name:"blockquote",components:n},o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"blockquote"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"fillData()")," - Enzyme helper that fires a change event with a value for an element at the given selector")),o.a.createElement(m.MDXTag,{name:"pre",components:n,parentName:"blockquote"},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"fillData(\n  form, // mounted <DefinitionTester />\n  'select#root_blah' // selector\n  'USA', // value\n);\n")),o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"blockquote"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"fillDate()")," - Enzyme helper that fills in a date field with data from the given date string.")),o.a.createElement(m.MDXTag,{name:"pre",components:n,parentName:"blockquote"},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"fillDate(\n  form, // mounted <DefinitionTester />\n  'select#root_blah' // selector\n  '1950-1-3', // value\n);\n")),o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"blockquote"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"selectCheckbox()")," - Enzyme helper that fires a change event with a value for a checkbox at the given name"))),o.a.createElement("h2",{id:"other-utilities"},"Other utilities"),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"These utilities can be found in ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"em"},"platform/testing/unit/helpers.js"))),o.a.createElement(m.MDXTag,{name:"ul",components:n},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"mockFetch()")," -  A function to mock the global fetch function and return the value provided in returnVal",o.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"li"},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"resetFetch()")," - resets the mocked fetch set with ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"mockFetch()")),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"mockApiRequest()")," - decorated ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"mockFetch()")," that adds typical API headers to ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"returnVal")),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"mockMultipleApiRequests()")," - decorated ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"mockFetch()")," that mocks a fetch call for each response object in an array")))),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{}},"mockFetch(\n  new Error('fake error'), // returnVal\n  false, // shouldResolve: false returns rejected promise. default is true\n);\n")),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"This utility can be found in ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"em"},"platform/utilities/storage/localstorage.js"))),o.a.createElement(m.MDXTag,{name:"ul",components:n},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"getLocalStorage()")," - convenience accessor for local storage and implements a fallback. Useful for stubbing localstorage.")),o.a.createElement("h2",{id:"legacy-tools"},"Legacy tools"),o.a.createElement(m.MDXTag,{name:"ul",components:n},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"While ReactTestUtils and SkinDeep are used in many of our tests, it's recommended that updated or new tests always use Enzyme")))},t}(o.a.Component),i={}}}]);
//# sourceMappingURL=component---src-pages-getting-started-common-tasks-new-unit-test-mdx-34a7762eeeaa70c1cf5d.js.map