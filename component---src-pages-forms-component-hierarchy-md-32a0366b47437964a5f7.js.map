{"version":3,"sources":["webpack:///./src/pages/forms/component-hierarchy.md"],"names":["layoutProps","MDXContent","props","layout","DefaultLayout","render","this","components","name","Layout","Object","assign","id","parentName","React","Component","_frontmatter"],"mappings":"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","file":"component---src-pages-forms-component-hierarchy-md-32a0366b47437964a5f7.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h1 id=\"about-the-react-component-hierarchy\">About the React component hierarchy</h1>\n      <MDXTag name=\"p\" components={components}>{`The VAFS builds a React application of a form, and determines which React components to render based on the description of the form in the form configuration file.`}</MDXTag>\n      <h2 id=\"in-this-guide\">In this guide</h2>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#about-the-form-component-fields-and-widgets\"\n          }}>{`About the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`Form`}</MDXTag>{` component, fields, and widgets`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n                \"href\": \"#example-schema-string-object\"\n              }}>{`Example schema: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`string`}</MDXTag>{` object`}</MDXTag></MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n                \"href\": \"#example-schema-string-with-enum-property\"\n              }}>{`Example schema: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`string`}</MDXTag>{` with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`enum`}</MDXTag>{` property`}</MDXTag></MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n                \"href\": \"#example-schema-object\"\n              }}>{`Example schema: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`object`}</MDXTag></MDXTag></MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n                \"href\": \"#example-schema-arrayfield\"\n              }}>{`Example schema: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`ArrayField`}</MDXTag></MDXTag></MDXTag>\n          </MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#field-component-props\"\n          }}>{`Field component props`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n                \"href\": \"#about-the-onchange-field-component\"\n              }}>{`About the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`onChange`}</MDXTag>{` field component`}</MDXTag></MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n                \"href\": \"#about-the-uischema-field-component\"\n              }}>{`About the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`uiSchema`}</MDXTag>{` field component`}</MDXTag></MDXTag>\n          </MDXTag></MDXTag>\n      </MDXTag>\n      <h2 id=\"about-the-form-component-fields-and-widgets\">About the Form component, fields, and widgets</h2>\n      <MDXTag name=\"p\" components={components}>{`At the top level, RJSF uses a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Form`}</MDXTag>{` component to take the schema inputs and render a hierarchy of components for each field of the form:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"em\" components={components} parentName=\"li\">{`Fields`}</MDXTag>{` generally match the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`type`}</MDXTag>{` attribute in a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`schema`}</MDXTag>{` object. There are object fields, array fields, number fields, boolean fields, and string fields. Except for arrays and objects, the fields render a label (via `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`FieldTemplate`}</MDXTag>{`) and a widget. To specify a particular field, set the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ui:field`}</MDXTag>{` property to a specific field.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`A `}<MDXTag name=\"em\" components={components} parentName=\"li\">{`widget`}</MDXTag>{` is the html input element that accepts data from the user. To specify a particular widget, set the  `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ui:widget`}</MDXTag>{` property to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`text`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`email`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`checkbox`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`radio`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`select`}</MDXTag>{`, and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`textarea`}</MDXTag>{`. While there are many widgets provided by RJSF, the defaults are overwritten with these versions.`}</MDXTag>\n      </MDXTag>\n      <h3 id=\"example-schema-string-object\">Example schema: string object</h3>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n  type: 'string'\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The two `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Field`}</MDXTag>{` components determine which fields and widgets to render. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SchemaField`}</MDXTag>{` uses the two schemas the library accepts, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{`, to determine what other `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Field`}</MDXTag>{` component to render. The example chose `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`StringField`}</MDXTag>{` because the schema type was `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`string`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`StringField`}</MDXTag>{` component then rendered `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TextWidget`}</MDXTag>{`, based on `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{`, because the only information provided was that the field is a string (the default widget type).`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`<SchemaField>\n  <StringField>\n    <FieldTemplate>\n      <TextWidget/>\n    </FieldTemplate>\n  </StringField>\n</SchemaField>\n`}</MDXTag></MDXTag>\n      <h3 id=\"example-schema-string-with-enum-property\">Example schema: string with enum property</h3>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n  type: 'string',\n  enum: ['first', 'second', 'third']\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The hierarchy for this field uses `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SelectWidget`}</MDXTag>{` instead of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TextWidget`}</MDXTag>{`, because `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`StringField`}</MDXTag>{` detected the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`enum`}</MDXTag>{` property in the schema.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`<SchemaField>\n  <StringField>\n    <FieldTemplate>\n      <SelectWidget/>\n    </FieldTemplate>\n  </StringField>\n</SchemaField>\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`While in most cases a field component is responsible for rendering a label and a widget, for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`object`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`array`}</MDXTag>{` schema types, the field component renders additional field components for each of the elements they contain.`}</MDXTag>\n      <h3 id=\"example-schema-object\">Example schema: object</h3>\n      <MDXTag name=\"p\" components={components}>{`This is an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`object`}</MDXTag>{` schema with two string fields.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n  type: 'object',\n  properties: {\n    field1: {\n      type: 'string'\n    },\n    field2: {\n      type: 'string'\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ObjectField`}</MDXTag>{` component renders a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SchemaField`}</MDXTag>{` component for each of its properties. Those properties are both `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`string`}</MDXTag>{` types, so it looks like the first hierarchy, but nested.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`<SchemaField>\n  <ObjectField>\n    <SchemaField>\n      <StringField>\n        <FieldTemplate>\n          <TextWidget/>\n        </FieldTemplate>\n      </StringField>\n    </SchemaField>\n    <SchemaField>\n      <StringField>\n        <FieldTemplate>\n          <TextWidget/>\n        </FieldTemplate>\n      </StringField>\n    </SchemaField>\n  </ObjectField>\n</SchemaField>\n`}</MDXTag></MDXTag>\n      <h3 id=\"example-schema-arrayfield\">Example schema: ArrayField</h3>\n      <MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ArrayField`}</MDXTag>{` renders a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`SchemaField`}</MDXTag>{` component for each item in the array. The library only uses the array field where each item is an object type schema.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      field1: {\n        type: 'string'\n      },\n      field2: {\n        type: 'string'\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <h2 id=\"field-component-props\">Field component props</h2>\n      <MDXTag name=\"p\" components={components}>{`In order for each component to know what to render, field components pass a collection of props down through the component hierarchy. Most are passed to widget components.`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`name`}</MDXTag>{`: The property name of the current field. For example, the object schema above would be named `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`field1`}</MDXTag>{`.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`required`}</MDXTag>{`: If the field is required or not (i.e. the property name is in the schema's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`required`}</MDXTag>{` array).`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`schema`}</MDXTag>{`: The schema for the specific field.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`uiSchema`}</MDXTag>{`: The ui schema for this field. See \"`}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#about-the-uischema-field-component\"\n          }}>{`About the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`uiSchema`}</MDXTag>{` field component`}</MDXTag>{`.\"`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`errorSchema`}</MDXTag>{`: An object that contains the list of errors for the current field and any child properties, if the field is an array or object.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`idSchema`}</MDXTag>{`: An object that contains the field IDs for the current field and any child properties. The library generates IDs for each field by joining each property name with an underscore.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`formData`}</MDXTag>{`: The actual data entered for the field so far.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`onChange`}</MDXTag>{`: The function that's called when data changes. See \"`}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#about-the-onchange-field-component\"\n          }}>{`About the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`onChange`}</MDXTag>{` field component`}</MDXTag>{`.\"`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`onBlur`}</MDXTag>{`: The function that's called when focus is lost on a widget.`}</MDXTag>\n      </MDXTag>\n      <h3 id=\"about-the-onchange-field-component\">About the onChange field component</h3>\n      <MDXTag name=\"p\" components={components}>{`When a user enters data, each widget calls `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onChange`}</MDXTag>{`. Each component in the hierarchy passes an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onChange`}</MDXTag>{` handler to child fields. When child data changes, the component combines it with the rest of the data and calls the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onChange`}</MDXTag>{` prop passed to it from its parent.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n  type: 'object',\n  properties: {\n    field1: {\n      type: 'string'\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In this example:`}</MDXTag>\n      <MDXTag name=\"ol\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ol\">{`The user types 'a'.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ol\">{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`TextWidget`}</MDXTag>{` for field1 calls `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`onChange`}</MDXTag>{` with 'a'.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ol\">{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`onChange`}</MDXTag>{` property came from the parent `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`ObjectField`}</MDXTag>{` component, which puts 'a' in an object as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`field1`}</MDXTag>{` (`}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`{ field1: 'a' }`}</MDXTag>{`), then calls the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`onChange`}</MDXTag>{` prop it was passed.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ol\">{`When it reaches the top-level `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Form`}</MDXTag>{` component, RJSF runs the JSON Schema validation and passes the results through the component hierarchy.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Similar to Redux, all state is kept in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Form`}</MDXTag>{` component, or the root of the form. All data processing and validation happens in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Form`}</MDXTag>{`, or is triggered by hooks provided by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Form`}</MDXTag>{`. The VAFS code built on top of this processes the schemas and form data in Redux, triggered by events provided by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Form`}</MDXTag>{`.`}</MDXTag>\n      <h3 id=\"about-the-uischema-field-component\">About the uiSchema field component</h3>\n      <MDXTag name=\"p\" components={components}>{`Along with the regular JSON Schema, a UI schema for UI-specific options that don't fit within the JSON Schema standard is also optionally defined for each field. The UI schema is passed to the form config file as an object, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{`, for each field. For more information, see \"`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/veteran-facing-services-tools/forms/about-the-schema-and-uischema-objects#understanding-the-uischema-object\"\n        }}>{`Understanding the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`uiSchema`}</MDXTag>{` object`}</MDXTag>{`.\"`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}