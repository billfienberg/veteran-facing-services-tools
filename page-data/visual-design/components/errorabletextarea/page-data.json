{"componentChunkName":"component---src-layouts-module-components-js","path":"/visual-design/components/errorabletextarea/","webpackCompilationHash":"62d222ce5f34ace7a5ea","result":{"data":{"mdx":{"id":"b0cf1cbf-0e33-5bf4-b508-f0b939c17689","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nclass RenderedComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      field: {\n        dirty: false,\n        charMax: 255\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"site-c-reactcomp__rendered\"\n    }, React.createElement(ErrorableTextArea, {\n      disabled: false,\n      errorMessage: \"Error message\",\n      label: \"Label\",\n      placeholder: \"Placeholder\",\n      name: \"Name\",\n      required: true,\n      field: this.state.field,\n      onValueChange: field => this.setState({\n        field\n      })\n    }));\n  }\n\n}\nconst layoutProps = {\n  RenderedComponent\n};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(\"h3\", {\n      id: \"code\"\n    }, \"Code:\"), React.createElement(\"h4\", {\n      id: \"example-state\"\n    }, \"Example State\"), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `state = {\n  field: {\n    dirty: false,\n    charMax: 255,\n  },\n}\n`)), React.createElement(\"h4\", {\n      id: \"code-sample\"\n    }, \"Code Sample\"), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `import ErrorableTextArea from '@department-of-veterans-affairs/formation-react/ErrorableTextArea'\n\n<ErrorableTextArea\n  disabled={false}\n  errorMessage='Error message'\n  label='Label'\n  placeholder='Placeholder'\n  name='Name'\n  required={true}\n  field={this.state.field}\n  onValueChange={(field) => this.setState({ field })}\n/>\n`)), React.createElement(\"h3\", {\n      id: \"rendered-component\"\n    }, \"Rendered Component\"), React.createElement(RenderedComponent, null));\n  }\n\n}"},"tableOfContents":{"items":[{"url":"#code","title":"Code:","items":[{"url":"#example-state","title":"Example State"},{"url":"#code-sample","title":"Code Sample"}]},{"url":"#rendered-component","title":"Rendered Component"}]}},"componentMetadata":{"id":"81aa1fcf-84fc-54f6-bc85-4d836dd45ee4","displayName":"ErrorableTextArea","docblock":"A form input with a label that can display error messages.","doclets":[],"childrenComponentProp":[{"name":"disabled","docblock":"","required":false,"parentType":{"name":"bool"},"type":{"value":null},"defaultValue":null},{"name":"errorMessage","docblock":"Error string to display in the component. When defined, indicates input has an error","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"label","docblock":"String for the input field label.","required":true,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"placeholder","docblock":"placeholder string for input field.","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"name","docblock":"String for the input name attribute.","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"required","docblock":"Render marker indicating field is required.","required":false,"parentType":{"name":"bool"},"type":{"value":null},"defaultValue":null},{"name":"field","docblock":"Value of the input field.","required":true,"parentType":{"name":"shape"},"type":{"value":{"value":{"name":"string","required":false},"dirty":{"name":"bool","required":false}}},"defaultValue":null},{"name":"additionalClass","docblock":"Extra attribute for use by CSS selector, specifically by tests","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"charMax","docblock":"max number of characters the field will accept","required":false,"parentType":{"name":"number"},"type":{"value":null},"defaultValue":null},{"name":"onValueChange","docblock":"a function with this prototype: (newValue)","required":true,"parentType":{"name":"func"},"type":{"value":null},"defaultValue":null}],"composes":null}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b0cf1cbf-0e33-5bf4-b508-f0b939c17689","source":"component","frontmatter":{"name":"ErrorableTextArea","tags":"text area, component","title":"ErrorableTextArea"},"name":"ErrorableTextArea"}}}