{"componentChunkName":"component---src-layouts-module-components-js","path":"/visual-design/components/errorabletextinput/","webpackCompilationHash":"f27ed1570a4728d9f33c","result":{"data":{"mdx":{"id":"3837a0fd-8b71-534e-8d16-c6600718b2c1","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nclass RenderedComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      field: {\n        dirty: false,\n        charMax: 255\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"site-c-reactcomp__rendered\"\n    }, React.createElement(ErrorableTextInput, {\n      onValueChange: e => e,\n      errorMessage: \"Error message\",\n      label: \"Label\",\n      placeholder: \"Placeholder\",\n      name: \"Name\",\n      field: this.state.field\n    }));\n  }\n\n}\nconst layoutProps = {\n  RenderedComponent\n};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(\"h3\", {\n      id: \"code\"\n    }, \"Code:\"), React.createElement(\"h4\", {\n      id: \"example-state\"\n    }, \"Example State\"), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `state = {\n  field: {\n    dirty: false,\n    charMax: 255,\n  },\n}\n`)), React.createElement(\"h4\", {\n      id: \"code-sample\"\n    }, \"Code Sample\"), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `import ErrorableTextInput from '@department-of-veterans-affairs/formation-react/ErrorableTextInput'\n\n<ErrorableTextArea\n  disabled={false}\n  errorMessage='Error message'\n  label='Label'\n  placeholder='Placeholder'\n  name='Name'\n  required={true}\n  field={this.state.field}\n  onValueChange={(field) => this.setState({ field })}\n/>\n`)), React.createElement(\"h3\", {\n      id: \"rendered-component\"\n    }, \"Rendered Component\"), React.createElement(RenderedComponent, null));\n  }\n\n}"},"tableOfContents":{"items":[{"url":"#code","title":"Code:","items":[{"url":"#example-state","title":"Example State"},{"url":"#code-sample","title":"Code Sample"}]},{"url":"#rendered-component","title":"Rendered Component"}]}},"componentMetadata":{"id":"7e183802-3934-5f20-b10e-2ea9cd01fee6","displayName":"ErrorableTextInput","docblock":"A form input with a label that can display error messages.\n\nProps:\n`errorMessage` - Error string to display in the component.\n                 When defined, indicates input has a validation error.\n`label` - String for the input field label.\n`name` - String for the input name attribute.\n`tabIndex` - Number for keyboard tab order.\n`autocomplete` - String for the input autocomplete attribute.\n`placeholder` - placeholder string for input field.\n`required` - boolean. Render marker indicating field is required.\n`field` - string. Value of the input field.\n`additionalClass` - Extra attribute for use by CSS selector, specifically\n                    by tests\n`onValueChange` - a function with this prototype: (newValue)","doclets":[],"childrenComponentProp":[{"name":"errorMessage","docblock":"display error message for input that indicates a validation error","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"label","docblock":"label for input field","required":true,"parentType":{"name":"any"},"type":{"value":null},"defaultValue":null},{"name":"placeholder","docblock":"text displayed when input has no user provided value","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"name","docblock":"input name attribute","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"autocomplete","docblock":"input autocomplete attribute","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"required","docblock":"render marker indicating field is required","required":false,"parentType":{"name":"bool"},"type":{"value":null},"defaultValue":null},{"name":"field","docblock":"value of the input field and if its dirty status","required":true,"parentType":{"name":"shape"},"type":{"value":{"value":{"name":"string","required":false},"dirty":{"name":"bool","required":false}}},"defaultValue":null},{"name":"additionalClass","docblock":"extra attribute for use by CSS selector, specifically by tests","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":null},{"name":"charMax","docblock":"maximum permitted input length","required":false,"parentType":{"name":"number"},"type":{"value":null},"defaultValue":null},{"name":"onValueChange","docblock":"called when input value is changed","required":true,"parentType":{"name":"func"},"type":{"value":null},"defaultValue":null},{"name":"type","docblock":"type attribute for input field","required":false,"parentType":{"name":"string"},"type":{"value":null},"defaultValue":{"value":"'text'","computed":false}}],"composes":null}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"3837a0fd-8b71-534e-8d16-c6600718b2c1","source":"component","frontmatter":{"name":"ErrorableTextInput","tags":"text input, component","title":"ErrorableTextInput"},"name":"ErrorableTextInput"}}}