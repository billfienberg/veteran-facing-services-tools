{"version":3,"sources":["webpack:///./src/pages/getting-started/common-tasks/new-feature.mdx"],"names":["layoutProps","MDXContent","props","layout","DefaultLayout","render","this","components","name","Layout","Object","assign","id","parentName","React","Component","_frontmatter"],"mappings":"+SAKA,IAAMA,EAAc,GACCC,E,qHACnB,WAAYC,GAAO,aACjB,cAAMA,IAAN,MACKC,OAASC,IAFG,E,mBAKnBC,OAAA,WAAS,MAIHC,KAAKJ,MAFPK,EAFK,EAELA,WACGL,E,oIAHE,mBAKP,OAAO,kBAAC,SAAD,CAAQM,KAAK,UAAUC,OAAQH,KAAKH,OAAQH,YAAaU,OAAOC,OAAO,GAAIX,EAAaE,GAAQK,WAAYA,GAEjH,wBAAIK,GAAG,6CAAP,8CACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,8PACA,wBAAIK,GAAG,8BAAP,+BACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,wGACA,wBAAIK,GAAG,iBAAP,iBACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,UAAoD,kBAAC,SAAD,CAAQC,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CAC/G,KAAQ,yEADwC,iBAApD,6aAGA,wBAAIU,GAAG,WAAP,WACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,+BAAyE,kBAAC,SAAD,CAAQC,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CACpI,KAAQ,2EAD6D,WAAzE,maAGA,wBAAIU,GAAG,gBAAP,gBACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,iCAA2E,kBAAC,SAAD,CAAQC,KAAK,IAAID,WAAYA,EAAYM,WAAW,IAAIX,MAAO,CACtI,KAAQ,gFAD+D,gBAA3E,wPAEuR,kBAAC,SAAD,CAAQM,KAAK,aAAaD,WAAYA,EAAYM,WAAW,KAA7D,OAFvR,0KAGA,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,GAA7B,6FACA,wBAAIK,GAAG,2BAAP,2BACA,kBAAC,SAAD,CAAQJ,KAAK,IAAID,WAAYA,GAA7B,iWACA,kBAAC,SAAD,CAAQC,KAAK,IAAID,WAAYA,GAA7B,yCACA,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,GAC5B,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,+GAEF,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,GAA7B,mCACA,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,GAC5B,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,uFACA,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,qEACA,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,sFACA,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,+FAEF,kBAAC,SAAD,CAAQL,KAAK,IAAID,WAAYA,GAA7B,wCACA,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,GAC5B,kBAAC,SAAD,CAAQC,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,uGACA,kBAAC,SAAD,CAAQL,KAAK,KAAKD,WAAYA,EAAYM,WAAW,MAArD,gG,GA9CgCC,IAAMC,WAoDjCC,EAAe","file":"component---src-pages-getting-started-common-tasks-new-feature-mdx-24cdc2bc54e53609c21f.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h1 id=\"add-a-new-application-or-feature-to-vagov\">Add a new application or feature to VA.gov</h1>\n      <MDXTag name=\"p\" components={components}>{`Almost everyone working on VA.gov at some point will need to build a new feature, something that doesn't fit into the existing applications or widgets we have currently. This article will help guide you to the right way to implement that new feature.`}</MDXTag>\n      <h2 id=\"types-of-features-on-vagov\">Types of features on VA.gov</h2>\n      <MDXTag name=\"p\" components={components}>{`Broadly, we have three kinds of features on VA.gov: static content pages, applications, and widgets.`}</MDXTag>\n      <h3 id=\"content-pages\">Content pages</h3>\n      <MDXTag name=\"p\" components={components}>{`Static `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/veteran-facing-services-tools/getting-started/common-tasks/new-page\"\n        }}>{`content pages`}</MDXTag>{` are pages that are built through the Metalsmith build process and are static html stored in AWS. If you're reading this site, you're probably not the person who would be addding one of these pages. Typically these pages are added by content editors in the vagov-content repo or in the Drupal CMS. You may, however, be tasked with adding more complex behaviors to these pages, which is discussed later in the widgets section.`}</MDXTag>\n      <h3 id=\"widgets\">Widgets</h3>\n      <MDXTag name=\"p\" components={components}>{`On VA.gov, we use the term \"`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/veteran-facing-services-tools/getting-started/common-tasks/new-widget\"\n        }}>{`widgets`}</MDXTag>{`\" to describe features that implement some kind of dynamic behavior in a contained place on a page. Examples of this include our saved application widgets, which display information about in progress applications a signed-in user may have, which is shown on various static content pages. Typically these widgets are written in React and are lazily loaded in separate bundles from the default static pages JS bundle.`}</MDXTag>\n      <h3 id=\"applications\">Applications</h3>\n      <MDXTag name=\"p\" components={components}>{`The third type of feature are `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"/veteran-facing-services-tools/getting-started/common-tasks/new-application\"\n        }}>{`applications`}</MDXTag>{`. These are Javascript applications, written with React/Redux, that control all of the UI for a page and may have multiple client-side pages. There is a static content page for each of these applications that contains only a header, footer, and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`div`}</MDXTag>{` for the React application to mount to. These applications have their own JS bundle and the most flexibility for how to render content for a Veteran to interact with.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Examples of applications include our multi page forms, the claim status tracker app, etc.`}</MDXTag>\n      <h2 id=\"choosing-the-right-type\">Choosing the right type</h2>\n      <MDXTag name=\"p\" components={components}>{`Generally, you want to start with a simple content page, see if that will cover your needs, and if not, move up to an application widget. If that still isn't enough, then you can create an application. Full Javascript applications come at a cost for users, so we should make sure they're justified by the requirements of the feature you're building.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Content pages are the best choice if:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`The content on the page or pages you need are completely static and don't change based on api or user data`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Widgets are the best choice if:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`You need to implement some kind of dynamic behavior based on user input or api data`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`The dynamic behavior you need is a small part of the overall page`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`You want content editors to have control over most of what is on the page or pages`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`You have multiple pages with the same dynamic behavior and want to share code between them`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Applications are the best choice if:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Your feature has multiple pages that need to be dyanmically created based on user input or api data`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Your feature requires a lot of interaction and very little of the page you need is static`}</MDXTag>\n      </MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}