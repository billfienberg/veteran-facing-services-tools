{"version":3,"sources":["webpack:///./src/pages/forms/about-the-schema-and-uischema-objects.mdx"],"names":["layoutProps","MDXContent","props","layout","DefaultLayout","render","this","components","name","Layout","Object","assign","id","parentName","React","Component","_frontmatter"],"mappings":"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","file":"component---src-pages-forms-about-the-schema-and-uischema-objects-mdx-bd062e8fd79854e9459f.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h1 id=\"about-the-schema-and-uischema-objects\">About the schema and uiSchema objects</h1>\n      <MDXTag name=\"p\" components={components}>{`The VA.gov Forms System lets you build web-based forms using the JSON Schema standard for form data and React for the form UI. The form data and UI are represented by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` objects, respectively, which are included in the form configuration file.`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#understanding-the-schema-object\"\n          }}>{`Understanding the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`schema`}</MDXTag>{` object`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n                \"href\": \"#describing-object-fields-and-arrays\"\n              }}>{`Describing object fields and arrays`}</MDXTag></MDXTag>\n          </MDXTag></MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"#understanding-the-uischema-object\"\n          }}>{`Understanding the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`uiSchema`}</MDXTag>{` object`}</MDXTag><MDXTag name=\"ul\" components={components} parentName=\"li\">\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n                \"href\": \"#configuring-uischema-using-rjsf-options\"\n              }}>{`Configuring `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`uiSchema`}</MDXTag>{` using RJSF options`}</MDXTag></MDXTag>\n            <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n                \"href\": \"#configuring-uischema-using-vafs-options\"\n              }}>{`Configuring `}<MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`uiSchema`}</MDXTag>{` using VAFS options`}</MDXTag></MDXTag>\n          </MDXTag></MDXTag>\n      </MDXTag>\n      <h2 id=\"understanding-the-schema-object\">Understanding the schema object</h2>\n      <MDXTag name=\"p\" components={components}>{`The JSON Schema standard describes the allowed shape of JSON objects. Using a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema`}</MDXTag>{` object, a JSON schema provides information about structured JSON data. For more information about the JSON Schema Standard, see `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://spacetelescope.github.io/understanding-json-schema/\"\n        }}>{`Understanding JSON Schema`}</MDXTag>{`.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`For JSON Schema validator libraries, VAFS uses `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://www.npmjs.com/package/ajv\"\n        }}>{`ajv`}</MDXTag>{` for unit tests and `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://www.npmjs.com/package/jsonschema\"\n        }}>{`jsonschema`}</MDXTag>{` in the VAFS code.`}</MDXTag>\n      <h3 id=\"describing-object-fields-and-arrays\">Describing object fields and arrays</h3>\n      <MDXTag name=\"p\" components={components}>{`This example describes a JSON document that is an object with one property called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`myField`}</MDXTag>{`, which is a number, meaning `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{ myField: 2 }`}</MDXTag>{` would be valid:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n  type: 'object',\n  properties: {\n    myField: {\n      type: 'number'\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`However, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{}`}</MDXTag>{` is also valid. To require a property in an object, use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`required`}</MDXTag>{` property, which takes an array of property names passed as strings. As in this example, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`required`}</MDXTag>{` is always on the object that contains the field, not the field itself:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n  type: 'object',\n  required: ['myField'],\n  properties: {\n    myField: {\n      type: 'number'\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Arrays work similarly to objects. This example describes an array of boolean values: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`[true, false, true]`}</MDXTag>{`. Items can be an object schema or any other type of schema as well:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`{\n  type: 'array',\n  items: {\n    type: 'boolean'\n  }\n}\n`}</MDXTag></MDXTag>\n      <h2 id=\"understanding-the-uischema-object\">Understanding the uiSchema object</h2>\n      <MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` object was introduced by `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#react-jsonschema-form\"\n        }}>{`react-jsonschema-form`}</MDXTag>{`, or `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`RJSF`}</MDXTag>{`, as a means of describing how a form page should be rendered from a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema`}</MDXTag>{`. To generate a form, react-jsonschema-form steps through the schema depth and renders different React components based on the type of data each property in the schema represents. In VAFS, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` follows the format described in the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#the-uischema-object\"\n        }}>{`react-jsonschema-form documentation`}</MDXTag>{`, with some custom VAFS additions. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` objects should have a similar structure, with the same fields organized in the same way with these exceptions:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`uiSchema`}</MDXTag>{` doesn't need to contain all the fields found in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`schema`}</MDXTag>{` object.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`uiSchema`}</MDXTag>{` doesn't need a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`properties`}</MDXTag>{` object for sub-fields.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`For example, given this schema:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  type: 'object',\n  properties: {\n    field1: {\n      type: 'string'\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The matching `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` would be:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  'ui:title': 'My form',\n  field1: {\n    'ui:title': 'My field'\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`For array fields, you must specify an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`items`}</MDXTag>{` object that contains the fields for each row in the array in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` object:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  'ui:title': 'My form',\n  toursOfDuty: {\n    items: {\n      branchName: {\n        'ui:title': 'Branch'\n      }\n    }\n  }\n}\n`}</MDXTag></MDXTag>\n      <h3 id=\"configuring-uischema-using-rjsf-options\">Configuring uiSchema using RJSF options</h3>\n      <MDXTag name=\"p\" components={components}>{`If you're not already familiar with the RJSF uiSchema options, see the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#the-uischema-object\"\n        }}>{`RJSF library documentation`}</MDXTag>{`. Some commonly used options include:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#object-fields-ordering\"\n          }}>{`ui:order`}</MDXTag>{`: An array of field names in the order in which they should appear.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#alternative-widgets\"\n          }}>{`ui:widget`}</MDXTag>{`: The name of an alternative widget to use for the field, for example, a custom widget called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`yesNo`}</MDXTag>{`.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#custom-field-components\"\n          }}>{`ui:field`}</MDXTag>{`: The name of a custom field.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\n            \"href\": \"https://github.com/mozilla-services/react-jsonschema-form#custom-css-class-names\"\n          }}>{`classNames`}</MDXTag>{`: The class names to put on the component.`}</MDXTag>\n      </MDXTag>\n      <h3 id=\"configuring-uischema-using-vafs-options\">Configuring uiSchema using VAFS options</h3>\n      <MDXTag name=\"p\" components={components}>{`The VAFS code includes additional `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` functionality not found in the RJSF library.`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`{\n  // Used instead of the \\`title\\` property in the JSON Schema.\n  'ui:title': '',\n  // It can also be a component, which passes the current form data as a property.\n  'ui:title': ({ formData }) => <legend>{\\`A \\${formData.thing} title\\`}</legend>,\n\n  // Used instead of the \\`description\\` property in the JSON Schema. This can be a string\n  // or a React component, and is normally used on object fields in the schema to provide\n  // description text or HTML before a block of fields.\n  'ui:description': '' || DescriptionComponent,\n\n  // Customizes the field or widget you're using.\n  'ui:field': '' || FieldComponent,\n  'ui:widget': '' || WidgetComponent,\n\n  // Renders string fields on the review page. Always used when you specify a custom widget\n  // component. Can also be used with regular widgets.\n  'ui:reviewWidget': WidgetComponent,\n\n  // Renders a custom review field on the review page. Only used when you specify a widget\n  // component. The \\`children\\` parameter is a component from the \\`'ui:reviewWidget'\\`, but\n  // is only rendered by this custom reviewField if the schema for it is not an \\`object\\`\n  // or \\`array\\`; NOTE: you must return a div with a \"review-row\" class name and include\n  // child <dt> and <dd> elements to maintain accessibility standards\n  'ui:reviewField': ({ children, schema, uiSchema }) => (\n    <div className=\"review-row\">\n      <dt>\n        {uiSchema['ui:title']}\n        {uiSchema['ui:description]}\n      </dt>\n      <dd>{children}</dd>\n    </div>\n  ),\n\n  // Provides a function to make a field conditionally required. The data in the whole form,\n  // with no page breaks, is the only parameter. Don't make a field required in the JSON\n  // schema and in addition to using \\`ui:required\\` on that field. The index argument is\n  // provided if you use \\`ui:required\\` on data inside an array.\n  'ui:required': function (formData, index) {\n    return true || false;\n  },\n\n  // An array of validation functions or objects that you can use to add validation that's\n  // not possible through JSON Schema. See below for the properties passed to the validation\n  // functions and how to use them.\n  'ui:validations': [\n    /**\n     * Note the difference between the three data parameters:\n     *\n     * @param {any} fieldData The data for the current field being validated\n     * @param {object} formData The data for all the fields in every page\n     */\n    function (errors, fieldData, formData, fieldSchema, errorMessages) {\n      errors.addError('My error');\n    },\n    {\n      validator: (errors, fieldData, formData, fieldSchema, errorMessages, options) => {\n        errors.addError('My other error');\n      },\n      options: {}\n    }\n  ],\n\n  // An object with field-specific error messages. Structured by error name (from JSON Schema\n  // error types). This is passed to custom validations in \\`ui:validations\\` in order to allow\n  // configurable error messages in a validator.\n  'ui:errorMessages': {\n    'pattern': 'Please provide a value in the right format'\n  },\n  'ui:options': {\n\n    // An map of enum values to labels that are shown by the select and radio widgets.\n    labels: {\n      chapter30: 'A readable description (Chapter 30)'\n    },\n\n    // A map of values to a component, text, or JSX\n    // (https://reactjs.org/docs/introducing-jsx.html). If your field is a radio widget, the\n    // content here is shown underneath the radio button for that value when it's selected.\n    nestedContent: {\n      'value': <p>Some text</p>\n    },\n\n    // A string of class names that are added to the widget for the current field.\n    // \\`widgetClassNames\\` is similar to the default \\`classNames\\` property, but it puts the\n    // class names on the input/select/etc element itself, rather than a surrounding \\`div\\`.\n    widgetClassNames: '',\n\n    // For array fields, this component is shown when the item in the array is rendered as\n    // read-only on a page that is not a review page.\n    viewField: RowViewComponent,\n\n    // To show a field only when another field is true, set this option to the property name.\n    // It wraps the fields with an ExpandingGroup component using the \\`expandUnder\\` field as\n    // the first question.\n    expandUnder: '',\n\n    // To match to a specific value, use the \\`expandUnderCondition\\` option to specify the\n    // value that the \\`expandUnder\\` field's data should equal.\n    expandUnderCondition: 'someValue',\n    // \\`expandUnderCondition\\` can also be a function that receives the data from the\n    // \\`expandUnder\\` field as an argument.\n    expandUnderCondition: (field) => field === 'someValue' || field === 'someOtherValue',\n\n    // When using the expandUnder option, you can set \\`expandUnderClassNames\\` on the field\n    // specified by \\`expandUnder\\` and it will add classes to the \\`div\\` that wraps all of the\n    // fields when they're expanded. See cookbook for an example use case.\n    expandUnderClassNames: '',\n\n    // Hides the specified field on the review page.\n    hideOnReview: true || false,\n\n    // Hides the specified field on the review page when the field value is \\`false\\`.\n    hideOnReviewIfFalse: true || false\n\n    // A function that conditionally hides fields in the form. \\`hideIf\\` provides the \\`index\\`\n    // argument when you use \\`ui:required\\` on data inside an array.\n    hideIf: function (formData, index) {\n      return true || false;\n    }\n\n    // A function that conditionally replaces the current field's schema. \\`updateSchema\\`\n    // provides the \\`index\\` argument when you use \\`ui:required\\` on data inside an array.\n    updateSchema: function (formData, schema, uiSchema, index, pathToCurrentData) {\n      // This function returns an object with the properties you want to update. Instead of\n      // replacing the existing schema, it updates the individual properties.\n      return {\n        type: 'string'\n      };\n    },\n\n    // By default, array fields that are displayed on a single page in a form, such as\n    // information for multiple dependents, are displayed in a separate section on the\n    // review page. To keep the information in a single section on a review page, set\n    // this property to \\`true\\`.\n    keepInPageOnReview: true\n  }\n}\n`}</MDXTag></MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}