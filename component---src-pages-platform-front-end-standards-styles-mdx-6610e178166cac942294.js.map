{"version":3,"sources":["webpack:///./src/pages/platform/front-end-standards/styles.mdx"],"names":["layoutProps","MDXContent","props","layout","DefaultLayout","render","this","components","name","Layout","Object","assign","id","parentName","React","Component","_frontmatter"],"mappings":"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","file":"component---src-pages-platform-front-end-standards-styles-mdx-6610e178166cac942294.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/SidebarLayout.jsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <h1 id=\"guidelines-for-good-scss--css\">Guidelines for good SCSS / CSS</h1>\n      <MDXTag name=\"p\" components={components}>{`Some guidelines for writing good CSS that scales well and doesn't make your colleagues ragey.`}</MDXTag>\n      <h2 id=\"use-low-specificity-selectors\">Use low-specificity selectors</h2>\n      <MDXTag name=\"p\" components={components}>{`The more specific the selector is, the less reusable the accompanying CSS is and/or the longer a selector you need to override it. (Or you add `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`!important`}</MDXTag>{` in places you shouldn't.)`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The following should be used sparingly in CSS`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`id`}</MDXTag>{` selectors.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Complex element/type selectors with attributes such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`button[type=button]`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`input[type=text]`}</MDXTag>{`.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Descendant combinators such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`#main ol li ul`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`.process p a`}</MDXTag>{`.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Chaining class names. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`button`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`button.lg`}</MDXTag>{`)`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`High specificity selectors are more likely to create side effects, that have to be undone with more CSS rules or longer selectors.`}</MDXTag>\n      <h2 id=\"avoid-nesting-scss-selectors-prematurely\">Avoid nesting SCSS selectors prematurely</h2>\n      <MDXTag name=\"p\" components={components}>{`SCSS compiles nested selectors into descendant combinators. For example:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`#content {\n  ol {\n    p {}\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Compiles to:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`#content ol p {}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`There's a high likelihood, however that your selectors don't need to be that long; `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ol p`}</MDXTag>{` would provide the same styling. If the worry is being overly broad, you can get the same results using a class name. This is related to the previous point. Specific selectors are often caused by SCSS nesting.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Nesting selectors can be useful, however, when creating variants. For example:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`.button {\n  &-link {\n  }\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Compiles to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`button-link`}</MDXTag>{`.`}</MDXTag>\n      <h2 id=\"restrict-class-names-to-a-single-pattern-or-component-type\">Restrict class names to a single pattern or component type.</h2>\n      <MDXTag name=\"p\" components={components}>{`For example, don't use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.process`}</MDXTag>{` for lists `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`and`}</MDXTag>{` as a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`div`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`section`}</MDXTag>{` type. Rules you introduce for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`div.process`}</MDXTag>{` probably aren't related to those for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ol.process`}</MDXTag>{`. Instead use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.list-process`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.section-process`}</MDXTag>{`.`}</MDXTag>\n      <h2 id=\"favor-descriptive-class-names-that-describe-what-the-class-does-or-the-kind-of-content-it-affects\">Favor descriptive class names that describe what the class does or the kind of content it affects</h2>\n      <MDXTag name=\"p\" components={components}>{`Class names such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.primary`}</MDXTag>{`, or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.section`}</MDXTag>{` are confusing and more likely to be misused by a colleague than `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.intro-text`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.sidebar`}</MDXTag>{`.`}</MDXTag>\n      <h2 id=\"use-a-product-specific-prefix-to-avoid-class-name-collisions\">Use a product-specific prefix to avoid class name collisions</h2>\n      <MDXTag name=\"p\" components={components}>{`This keeps selector specificity low, while also restricting the side-effects of any one selector.`}</MDXTag>\n      <h2 id=\"dont-use-extend\">Don't use @extend</h2>\n      <MDXTag name=\"p\" components={components}>{`SCSS `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`@extend`}</MDXTag>{` repeats every instance of the extended selector for the extendee selector. (This will be flagged by our Sass-lint configuration.)`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`h4 {\n  color: #c09;\n  font-size: 1.2rem;\n  font-weight: 100;\n}\n\nlabel {\n  @extend h4;\n  cursor: pointer;\n}\n\n.footer h4 {\n  display: inline;\n}\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Compiles to:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`h4, label {\n  color: #c09;\n  font-size: 1.2rem;\n  font-weight: 100; }\n\nlabel {\n  cursor: pointer; }\n\n.header h4, .header label {\n  font-weight: bold; }\n\n.footer h4, .footer label {\n  display: inline; }\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Every instance of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`h4`}</MDXTag>{` will also be applied to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`label`}</MDXTag>{`. This is usually not the behavior we want, particularly across an entire code base.`}</MDXTag>\n      <h1 id=\"check-your-output\">CHECK. YOUR. OUTPUT.</h1>\n      <MDXTag name=\"p\" components={components}>{`Periodially check your generated CSS files (JavaScript too!) to ensure that you didn't introduce bloat with your selectors or asset imports.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`True story: we reduced the size of our home page CSS by ~400K by removing SVG fonts. Our Webpack configuration included base64-encoded versions of SVG fonts which dramatically inflated our file size. This fact was discovered only after viewing the generated CSS files.`}</MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    "],"sourceRoot":""}