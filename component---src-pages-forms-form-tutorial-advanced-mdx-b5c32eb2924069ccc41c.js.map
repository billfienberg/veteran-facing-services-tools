{"version":3,"sources":["webpack:///./src/pages/forms/form-tutorial-advanced.mdx","webpack:///./src/sidebar.js","webpack:///./src/components/sidebar/SidebarItems.jsx","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/layouts/layout.js"],"names":["layoutProps","MDXContent","props","_this","_React$Component","call","this","layout","DefaultLayout","render","_this$props","components","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_4__","name","Layout","Object","assign","parentName","className","href","React","Component","_frontmatter","module","exports","sections","id","items","query","ComponentList","react_default","gatsby_browser_entry","data","SidebarItems","edges","map","comp","node","path","context","_2758471434","_ref","length","item","key","to","Sidebar","location","sidebarSection","sidebarData","find","section","pathname","includes","type","value","onChange","placeholder","Fragment","getSitePages","pages","filter","page","fields","slug","children","Helmet_default","title","site","siteMetadata","meta","content","lang","_1044757290","propTypes","PropTypes","isRequired"],"mappings":"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","file":"component---src-pages-forms-form-tutorial-advanced-mdx-b5c32eb2924069ccc41c.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/home/jenkins/workspace/ran-facing-services-tools_master/packages/documentation/src/layouts/layout.js\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <MDXTag name=\"h2\" components={components}>{`Form Tutorial - Advanced`}</MDXTag>\n      <MDXTag name=\"h4\" components={components}>{`Using Common Definitions`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`All of our forms share schemas with the back-end through `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`vets-json-schema`}</MDXTag>{`, the repository where we store JSON Schemas for validating data submitted to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`vets-api`}</MDXTag>{` API endpoint. Assuming you've created one of those schemas, the next step is to incorporate that into your form, along with other common definitions we've built.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Adding your schema`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Assuming you've created your form using our form scaffolding generator, you should have some commented out lines in your `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`config/form.js`}</MDXTag>{` file:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`// import fullSchema from 'vets-json-schema/dist/VIC-schema.json';\n\n// ...code omitted...\n\n// const { } = fullSchema.properties;\n\n// const { } = fullSchema.definitions;\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`If you uncomment those lines and update the import path to match your schema's file name, you can start pulling in individual definitions and properties to use in your form. We try to use the properties from the shared schema as much as possible, since it helps keep the front-end and back-end in sync and avoid validation errors in production. For example, if you want to import an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`email`}</MDXTag>{` field from your schema, you can do something like this:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`import fullSchema from 'vets-json-schema/dist/VIC-schema.json';\n\n// ...code omitted...\n\nconst {\n  email\n} = fullSchema.properties;\n\n// const { } = fullSchema.definitions;\n\nconst formConfig = {\n   // ...code omitted...\n   page1: {\n     path: 'first-page',\n     title: 'First Page',\n     uiSchema: {\n       email: {\n         'ui:title': 'My field label'\n       }\n     },\n     schema: {\n       type: 'object',\n       properties: {\n         email\n       }\n     }\n   }\n   // ...code omitted...\n};\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Here we're using Javascript's object shorthand syntax to set the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`email`}</MDXTag>{` property to the object from the shared schema properties. That way we know we're using the same field name and using the same definition type as what will be used by the back-end. Note that we still need to be careful that we include all the fields we need from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fullSchema`}</MDXTag>{`.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Using a common front-end definition`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`We have a collection of common definitions and fields on the front-end for you to use in your form. Let's try using our common full name field:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`import fullSchema from 'vets-json-schema/dist/VIC-schema.json';\nimport fullNameUI from '../../common/schemaform/definitions/fullName';\n// ...code omitted...\n\nconst {\n  veteranFullName\n} = fullSchema.properties;\n\nconst {\n  fullName\n} = fullSchema.definitions;\n\nconst formConfig = {\n  // ...code omitted...\n  definitions: {\n    fullName\n  },\n  // ...code omitted...\n    page1: {\n      path: 'first-page',\n      title: 'First Page',\n      uiSchema: {\n        veteranFullName: fullNameUI\n      },\n      schema: {\n        type: 'object',\n        properties: {\n          veteranFullName\n        }\n      }\n    }\n   // ...code omitted...\n};\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`There are a few things going on here. One, we've pulled the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fullName`}</MDXTag>{` definition from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fullSchema`}</MDXTag>{`. JSON Schema's method of code reuse has you put definitions in a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`definitions`}</MDXTag>{` object in the schema, then reference them with a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`\\$ref`}</MDXTag>{` property, so we have to account for that on the front-end. We can do that by importing it from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fullSchema.definitions`}</MDXTag>{` and adding it to the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`definitions`}</MDXTag>{` object in our form config object.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Second, we've imported `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fullNameUI`}</MDXTag>{` from our common front-end definitions. For this field, we just have some `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` configuration that sets labels and widget types. Other fields are more complex, and may require you to call a function to generate the right configuration, and possibly import something for the regular `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`schema`}</MDXTag>{` object as well.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Finally, in the code you can see that we're using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fullNameUI`}</MDXTag>{` in the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`uiSchema`}</MDXTag>{` object, and we're using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`veteranFullName`}</MDXTag>{` like we used `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`email`}</MDXTag>{` previously.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Modifying common definitions`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Often you'll need to slightly modify common definitions on the front-end to change a label or some conditional logic. The way we typically do that is to use our data utilities to set values on the schema. For example, say we needed to make our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`veteranFullName`}</MDXTag>{` field expand underneath another field:`}</MDXTag>\n      <MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\n          \"className\": \"language-js\"\n        }}>{`import _ from 'lodash/fp';\nimport fullSchema from 'vets-json-schema/dist/VIC-schema.json';\nimport fullNameUI from '../../common/schemaform/definitions/fullName';\n// ...code omitted...\n\nconst {\n  veteranFullName\n} = fullSchema.properties;\n\nconst {\n  fullName\n} = fullSchema.definitions;\n\nconst formConfig = {\n   // ...code omitted...\n  definitions: {\n    fullName\n  },\n  // ...code omitted...\n    page1: {\n      path: 'first-page',\n      title: 'First Page',\n      uiSchema: {\n        myField: {\n          'ui:title': 'My field',\n          'ui:widget': 'yesNo'\n        },\n        veteranFullName: _.merge(fullNameUI, {\n          'ui:options': {\n            expandUnder: 'myField'\n          }\n        })\n      },\n      schema: {\n        type: 'object',\n        properties: {\n          myField: { type: 'boolean' },\n          veteranFullName\n        }\n      }\n    }\n   // ...code omitted...\n};\n`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`We've imported the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"https://github.com/lodash/lodash/wiki/FP-Guide\"\n        }}>{`Lodash FP (functional programming) library`}</MDXTag>{` and using its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`merge`}</MDXTag>{` function to merge our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:options`}</MDXTag>{` into the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fullNameUI`}</MDXTag>{` object, so that we don't have to redefine all of the configuration in there. All of the Lodash FP methods treat objects as immutable, not modifying anything you pass in to them, so you can reuse `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`fullNameUI`}</MDXTag>{` in another spot in your form without worrying about having to remove the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ui:options`}</MDXTag>{` configuration we added.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Things to watch out for`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The point of having these common definitions and sharing a schema between the front-end and back-end is to encourage consistency in our forms and to reduce errors when submitting a form to a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`vets-api`}</MDXTag>{` endpoint. But following the guide above won't completely prevent those issues. Here are some things to keep in mind:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Since we're importing individual fields from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`fullSchema`}</MDXTag>{`, it can be easy to miss required field rules, since we often import those directly. Make sure you're marking all the necessary fields as required in your form config.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`Importing individual fields makes it easy to group them in ways specific to the front-end, so make sure if you are grouping things, you're using property names prefixed with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`view:`}</MDXTag>{` to remove that grouping before submitting.`}</MDXTag>\n      </MDXTag>\n      <hr />\n      <MDXTag name=\"p\" components={components}>{`Back: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"./form-tutorial-intermediate\"\n        }}>{`Vets Website Form Tutorial - Intermediate`}</MDXTag></MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Next: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\n          \"href\": \"./save-in-progress\"\n        }}>{`Setting up Save in Progress`}</MDXTag></MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    ","module.exports = {\n  sections: [\n    {\n      id: 'getting-started',\n      name: 'Getting started',\n      href: 'getting-started',\n      items: [\n        {\n          name: 'Environment setup',\n          items: [\n            {\n              name: 'Internal Tools',\n              href: 'getting-started/internal-tools'\n            },\n          ],\n        },\n        {\n          name: 'Common tasks',\n          items: [\n            {\n              name: 'How to Add Documents',\n              href: 'getting-started/how-to'\n            },\n            {\n              name: 'How to Add Pages from Github',\n              href: 'getting-started/add-external-pages'\n            },\n          ]\n        },\n        {\n          name: 'Code organization',\n          items: [],\n        },\n        {\n          name: 'Standards and conventions',\n          items: [],\n        },\n        {\n          name: 'Development workflow',\n          items: [],\n        },\n      ],\n    },\n    {\n      id: 'architecture',\n      name: 'Architecture',\n      href: 'architecture',\n      items: [\n        {\n          name: 'Site structure',\n          items: [],\n        },\n        {\n          name: 'How does the build work?',\n        },\n        {\n          name: 'How do unit tests work?',\n        },\n        {\n          name: 'How do end-to-end tests work?',\n        },\n        {\n          name: 'Visual regression testing',\n        },\n        {\n          name: 'Teamsite',\n        },\n      ]\n    },\n    {\n      id: 'forms',\n      name: 'Forms',\n      href: 'forms',\n      items: [\n        {\n          name: 'Introduction',\n          href: 'forms/when-to-use-fs'\n        },\n        {\n          name: 'Tutorial',\n          items: [\n            {\n              name: 'Form Tutorial - Basic',\n              href: 'forms/form-tutorial-basic'\n            },\n            {\n              name: 'Form Tutorial - Intermediate',\n              href: 'forms/form-tutorial-intermediate'\n            },\n            {\n              name: 'Form Tutorial - Advanced',\n              href: 'forms/form-tutorial-advanced'\n            },\n            {\n              name: 'Setting up Save in Progress',\n              href: 'forms/save-in-progress'\n            },\n            {\n              name: 'Forms in Production',\n              href: 'forms/forms-in-production'\n            },\n          ],\n        },\n        {\n          name: 'Architecture',\n          items: [],\n        },\n        {\n          name: 'Common tasks',\n          items: [],\n        },\n      ]\n    },\n    {\n      id: 'platform',\n      name: 'Platform',\n      href: 'platform',\n      items: [\n        {\n          name: 'Formation',\n          items: [],\n        },\n        {\n          name: 'Formation components',\n          query: 'componentList'\n        },\n        {\n          name: 'Feature flags',\n        },\n        {\n          name: 'Identity',\n          items: [],\n        },\n        {\n          name: 'Static content',\n          items: [],\n        },\n        {\n          name: 'Monitoring',\n          items: [],\n        },\n      ]\n    },\n  ]\n};\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nfunction ComponentList() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ComponentListQuery {\n          components: allSitePage(\n            filter: {context: {source: {eq: \"component\"}}}\n          ) {\n            edges {\n              node {\n                path\n                context {\n                  source\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <SidebarItems items={data.components.edges.map(comp => {\n          return {\n            href: comp.node.path,\n            name: comp.node.context.name,\n          };\n        })}/>\n      )}/>\n  );\n\n}\n\nexport default function SidebarItems({ items }) {\n  if (!items.length) {\n    return null;\n  }\n\n  return (\n    <ul className=\"menu-list\">\n      {items.map(item => (\n        <li key={item.name}>\n          {!!item.items && (\n            <li key={item.name}>\n              <h4>{item.name}</h4>\n              <SidebarItems items={item.items}/>\n            </li>\n          )}\n          {item.query === 'componentList' && (\n            <li key={item.name}>\n              <h4>{item.name}</h4>\n              <ComponentList/>\n            </li>\n          )}\n          {!!item.href && (\n            <li key={item.name}><Link to={item.href}>{item.name}</Link></li>\n          )}\n          {!item.href && !item.items && !item.query && (\n            <li key={item.href}><Link to={item.href}>{item.name}</Link></li>\n          )}\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport SidebarItems from './SidebarItems';\nimport sidebarData from '../../sidebar';\n\n/**\n * Sidebar\n *\n * @param {props} props\n */\n\nexport default function Sidebar({ location }) {\n  const sidebarSection = sidebarData.sections.find(section => location.pathname.includes(`/${section.href}`));\n\n  return (\n    <aside className=\"sidebar\">\n      <div className=\"search\">\n        <div className=\"input-wrap\">\n          <input type=\"search\" value=\"\" onChange={() => {}} placeholder=\"Type to search\"/>\n        </div>\n      </div>\n\n      {!!sidebarSection && (\n        <>\n          <h1>{ sidebarSection.name }</h1>\n          <Link className=\"home-link\" to=\"\">Home</Link>\n          <SidebarItems items={sidebarSection.items}/>\n        </>\n      )}\n      {!sidebarSection && (\n        <ul className=\"menu-list\">\n          {sidebarData.sections.map(section => <li key={section.id}><Link to={section.href}>{section.name}</Link></li>)}\n        </ul>\n      )}\n    </aside>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport Sidebar from '../components/sidebar/Sidebar';\nimport './layout.scss';\n\n/**\n * Layout\n *\n * @class Layout\n * @extends {React.Component}\n */\nclass Layout extends React.Component {\n  getSitePages(pages) {\n    // removing the index from the list\n    return pages.filter(page => page.node.fields.slug !== '/');\n  }\n\n  render() {\n    const { children, location } = this.props;\n\n    return (\n      <StaticQuery\n        query={graphql`\n          query SiteTitleQuery {\n            site {\n              siteMetadata {\n                title\n              }\n            }\n          }\n        `}\n        render={data => (\n          <>\n            <Helmet\n              title={data.site.siteMetadata.title}\n              meta={[\n                {\n                  name: 'description',\n                  content:\n                    'Template for creating design system documentatation',\n                },\n                {\n                  name: 'docsearch:language',\n                  content: 'en'\n                },\n                {\n                  name: 'docsearch:version',\n                  content: '1.0.0'\n                },\n                {\n                  name: 'keywords',\n                  content: 'design system, style guide, documentation',\n                },\n              ]}>\n              <html lang=\"en\"/>\n            </Helmet>\n            <Sidebar location={location}/>\n            <div className=\"ContentArea docSearch-content\">{children}</div>\n          </>\n        )}/>\n    );\n  }\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n"],"sourceRoot":""}